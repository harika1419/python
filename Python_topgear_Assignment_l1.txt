1.Given a list, url = [www.annauniv.edu, www.google.com, www.ndtv.com, www.website.org, www.bis.org.in, www.rbi.org.in]; Sort the list based on the top level domain (edu, com, org, in) using custom sorting

from operator import itemgetter, attrgetter
url=["www.annauniv.edu", "www.google.com", "www.ndtv.com", "www.website.org", "www.bis.org.in", "www.rbi.org.in"]
List=[]
List2=[]
for i in url:
  s=i.split(".")
  List.append(s)
sort_url=sorted(List, key=lambda x: x[-1])
for i in sort_url:
  k='.'.join(i)
  List2.append(k)
print(List2)
-------------------------
output:::
['www.google.com', 'www.ndtv.com', 'www.annauniv.edu', 'www.bis.org.in', 'www.rbi.org.in', 'www.website.org']

----------------------------------------------
2.	Given a list of strings, return the count of the number of strings where the string length is 2 or more and the first and last chars of the string are the same.  

i.	['axa', 'xyz', 'gg', 'x', 'yyy']
ii.	['x', 'cd', 'cnc', 'kk']
iii.	['bab', 'ce', 'cba', 'syanora']

list1=input("Please enter the list of strings")
list2=eval(list1)
count=0
count1=0
for i in list2:
  if(len(i)>=2):
    count=count+1
    if(i[0]==i[-1]):
      count1=count1+1
    
print("No of stirngs having length 2 or more is::%d"%count)
print("No of stirngs having first and last letter same is::%d"%count1)

----------------------
output:::
Please enter the list of strings ['axa', 'xyz', 'gg', 'x', 'yyy']
No of stirngs having length 2 or more is::4
No of stirngs having first and last letter same is::3

Please enter the list of strings ['x', 'cd', 'cnc', 'kk']
No of stirngs having length 2 or more is::3
No of stirngs having first and last letter same is::2
=================================================================
3.	Given a list of strings, return a list with the strings in sorted order, except group all the strings that begin with 'x' first.  e.g. ['mix', 'xyz', 'apple', 'xanadu', 'aardvark'] yields
['xanadu', 'xyz', 'aardvark', 'apple', 'mix']. 
Hint: this can be done by making 2 lists and sorting each of them before combining them.
i.	['bbb', 'ccc', 'axx', 'xzz', 'xaa']
ii.	['mix', 'xyz', 'apple', 'xanadu', 'aardvark']


list1=input("Please enter the list of strings")
list2=eval(list1)
list3=[]
list4=[]
list5=[]
for i in list2:
  if i[0]=='x':
    list3.append(i)
  else:
    list4.append(i)
sort_list=sorted(list4)
list5=list3+sort_list
print(list5)

-----------------------
output:::
Please enter the list of strings ['bbb', 'ccc', 'axx', 'xzz', 'xaa']
['xzz', 'xaa', 'axx', 'bbb', 'ccc']

Please enter the list of strings ['mix', 'xyz', 'apple', 'xanadu', 'aardvark']
['xyz', 'xanadu', 'aardvark', 'apple', 'mix']

=====================================================================
4.	Given a list of non-empty tuples, return a list sorted in increasing order by the last element in each tuple. 
e.g. [(1, 7), (1, 3), (3, 4, 5), (2, 2)] yields [(2, 2), (1, 3), (3, 4, 5), (1, 7)]
      Hint: use a custom key= function to extract the last element form each tuple.
i.	 [(1, 3), (3, 2), (2, 1)]
ii.	[(1, 7), (1, 3), (3, 4, 5), (2, 2)]

from operator import itemgetter
list1=input("Please enter the list of tuples")
list2=eval(list1)
sort_list=sorted(list2,key=itemgetter(-1))

print(sort_list)
--------------------
output:::
Please enter the list of tuples [(1, 7), (1, 3), (3, 4, 5), (2, 2)] 
[(2, 2), (1, 3), (3, 4, 5), (1, 7)]
Please enter the list of tuples[(1, 3), (3, 2), (2, 1)]
[(2, 1), (3, 2), (1, 3)]

==========================================================================
5.	Given a list of numbers, return a list where all adjacent == elements have been reduced to a single element, so [1, 2, 2, 3] returns [1, 2, 3]. You may create a new list or modify the passed in list.
i.	 [1, 2, 2, 3], [2, 2, 3, 3, 3]

list1=input("Please enter the list")
list2=eval(list1)
list3=[]
for i in list2:
  if i not in list3:
    list3.append(i)

print(list3)
--------------------------------

output::
Please enter the list [1, 2, 2, 3]
[1, 2, 3]
Please enter the list [2, 2, 3, 3, 3]
[2, 3]

================================================================
6.	Write a function to print the information in the dictionary(bookstore) in the given format

bookstore={"New Arrivals":{"COOKING":["Everyday Italian","Giada De Laurentiis","2005","30.00"],"CHILDREN":["Harry Potter”, J K. Rowling","2005","29.99"],"WEB":["Learning XML","Erik T. Ray","2003","39.95"]}}


BOOKSTORE

'Learning XML', 'Erik T. Ray', '2003', '39.95' 
'Everyday Italian', 'Giada De Laurent is', '2005', '30.00']
 'Harry Potter', 'J K. Rowling', '2005', '29.99']
---------------------
dict1=[]
bookstore={"New Arrivals":{"COOKING":["Everyday Italian","Giada De Laurentiis","2005","30.00"],"CHILDREN":["Harry Potter”, J K. Rowling","2005","29.99"],"WEB":["Learning XML","Erik T. Ray","2003","39.95"]}}
result=bookstore.get("New Arrivals")
for i in result:
  dict1.append(result[i])
#dic2=(dict1.split(','))
for i in dict1:
  print(i)
-------------------------
output::
['Everyday Italian', 'Giada De Laurentiis', '2005', '30.00']
['Harry Potter”, J K. Rowling', '2005', '29.99']
['Learning XML', 'Erik T. Ray', '2003', '39.95']

===============================================================
9.	 Below is the output of # show ip interface brief command on a router

Interface		IP-Address	OK? 	Method Status	Protocol
 
FastEthernet0/0	192.168.1.242	YES 	manual up	up 
FastEthernet1/0        unassigned	YES 	unset		down 
Serial2/0              	192.168.1.250	YES 	manual up	up 
Serial3/0              	192.168.1.233	YES 	manual up	up 
FastEthernet4/0        unassigned	YES 	unset  		down	
FastEthernet5/0        unassigned	YES        unset 		down

a.	Use regular expressions to extract and display Interface and method status for all the interfaces.
i.	E.g.  FastEthernet0/0, manual up
---------------------------------
import re
file=open("input1.txt","r")
regex=re.compile(r"\w+\d/\d")
regex1=re.compile(r"manual up|unset")
line=file.readlines()
for l in line:
	match=regex.findall(l)
	match1=regex1.findall(l)
	if(match !=[] and match1 !=[]):
		print(match,match1)

output:::
['FastEthernet0/0'] ['manual up']
['FastEthernet1/0'] ['unset']
['Serial2/0'] ['manual up']
['Serial3/0'] ['manual up']
['FastEthernet4/0'] ['unset']
['FastEthernet5/0'] ['unset']

==========================================================
10.	Given a number line from -infinity to +infinity. You start at 0 and can go either to the left or to the right. The condition is that in i’th move, you take i steps. In the first move take 1 step, second move 2 steps and so on. 
Hint: 3 can be reached in 2 steps (0, 1) (1, 3). 2 can be reached in 3 steps (0, 1) (1,-1) (-1, 2)
a) Find the optimal number of steps to reach position 1000000000 and -1000000000. 
-----------------------------

